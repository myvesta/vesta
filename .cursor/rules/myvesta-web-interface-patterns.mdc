---
alwaysApply: true
description: Patterns and structure for myVesta web interface PHP scripts
---

# myVesta Web Interface PHP Script Patterns

This rule defines the standard patterns and structure for myVesta web interface PHP scripts located in the [web/](mdc:web/) folder. All scripts follow consistent patterns for handling requests, validation, and rendering.

## Standard Script Structure

Every myVesta web interface script follows this exact structure:

### 1. Header Section
```php
<?php
error_reporting(NULL);
ob_start();
$TAB = 'MODULE_NAME';  // e.g., 'WEB', 'USER', 'DNS', 'DB'

// Main include
include($_SERVER['DOCUMENT_ROOT']."/inc/main.php");
```

### 2. POST Request Handling (Add/Edit Scripts Only)
```php
// Check POST request
if (!empty($_POST['ok'])) {
    
    // Check token (CSRF protection)
    if ((!isset($_POST['token'])) || ($_SESSION['token'] != $_POST['token'])) {
        header('location: /login/');
        exit();
    }
    
    // Field validation
    if (empty($_POST['v_field'])) $errors[] = __('field_name');
    if (!empty($errors[0])) {
        // Build error message
        foreach ($errors as $i => $error) {
            if ($i == 0) {
                $error_msg = $error;
            } else {
                $error_msg = $error_msg.", ".$error;
            }
        }
        $_SESSION['error_msg'] = __('Field "%s" can not be blank.',$error_msg);
    }
    
    // Input sanitization
    $v_field = escapeshellarg($_POST['v_field']);
    
    // Execute Vesta command
    if (empty($_SESSION['error_msg'])) {
        exec (VESTA_CMD."v-command-name ".$user." ".$v_field, $output, $return_var);
        check_return_code($return_var,$output);
        unset($output);
    }
    
    // Success handling
    if (empty($_SESSION['error_msg'])) {
        $_SESSION['ok_msg'] = __('SUCCESS_MESSAGE',htmlentities($_POST['v_field']));
        unset($v_field);
    }
}
```

### 3. Data Preparation (List Scripts)
```php
// Data
exec (VESTA_CMD."v-list-command $user json", $output, $return_var);
$data = json_decode(implode('', $output), true);
$data = is_array($data) ? array_reverse($data,true) : array();
unset($output);
```

### 4. Page Rendering
```php
// Render page
render_page($user, $TAB, 'template_name');

// Flush session messages
unset($_SESSION['error_msg']);
unset($_SESSION['ok_msg']);
```

## Key Patterns

### CSRF Protection
- **Always check token**: `if ((!isset($_POST['token'])) || ($_SESSION['token'] != $_POST['token']))`
- **Redirect on failure**: `header('location: /login/'); exit();`

### Input Validation
- **Check empty fields**: `if (empty($_POST['v_field'])) $errors[] = __('field_name');`
- **Build error messages**: Use foreach loop to concatenate multiple errors
- **Set session error**: `$_SESSION['error_msg'] = __('Field "%s" can not be blank.',$error_msg);`

### Input Sanitization
- **Always escape shell args**: `$v_field = escapeshellarg($_POST['v_field']);`
- **Domain processing**: Remove www prefix and convert to lowercase
- **Password handling**: Use temporary files for secure password passing

### Vesta Command Execution
- **Standard pattern**: `exec (VESTA_CMD."v-command-name ".$user." ".$params, $output, $return_var);`
- **Error checking**: `check_return_code($return_var,$output);`
- **Cleanup**: `unset($output);`

### Success/Error Handling
- **Success message**: `$_SESSION['ok_msg'] = __('SUCCESS_MESSAGE',htmlentities($_POST['v_field']));`
- **Variable cleanup**: `unset($v_field);` on success
- **Session cleanup**: Always unset error_msg and ok_msg at the end

## Script Types

### Add Scripts (`web/add/`)
- Handle POST requests with `$_POST['ok']`
- Validate and sanitize input
- Execute Vesta commands to create resources
- Show success/error messages
- Default case renders the form

### List Scripts (`web/list/`)
- Fetch data using Vesta commands with JSON output
- Reverse array order for newest-first display
- Render list templates
- Set back URI for navigation

### Edit Scripts (`web/edit/`)
- Similar to add scripts but for modifications
- Pre-populate form fields with existing data
- Handle updates instead of creation

## Template System

### render_page() Function
- **Location**: [web/inc/main.php](mdc:web/inc/main.php)
- **Usage**: `render_page($user, $TAB, 'template_name');`
- **Template directory**: [web/templates/](mdc:web/templates/)
- **Global variables**: Extracts variables starting with `v_` or lowercase letters

### Template Naming Convention
- **Add templates**: `add_module` (e.g., `add_web`, `add_user`)
- **List templates**: `list_module` (e.g., `list_web`, `list_user`)
- **Edit templates**: `edit_module` (e.g., `edit_web`, `edit_user`)

## Common Variables

### Session Variables
- `$_SESSION['error_msg']` - Error messages to display
- `$_SESSION['ok_msg']` - Success messages to display
- `$_SESSION['token']` - CSRF protection token
- `$_SESSION['back']` - Back URI for navigation

### Global Variables
- `$user` - Current logged-in user
- `$TAB` - Current module tab name
- `$data` - Array of data for display
- `$VESTA_CMD` - Path to Vesta command binary

## Security Considerations

### Password Handling
- Use temporary files for password passing to shell commands
- Clean up temporary files after use
- Never log passwords in plain text

### Input Validation
- Always validate required fields
- Use `escapeshellarg()` for shell command parameters
- Validate email addresses with `filter_var()`
- Check password length (minimum 6 characters)

### Error Handling
- Use `check_return_code()` for command execution
- Set appropriate error messages in session
- Redirect to login on authentication failures

## File References

- Main include: [web/inc/main.php](mdc:web/inc/main.php)
- Templates: [web/templates/](mdc:web/templates/)
- Add scripts: [web/add/](mdc:web/add/)
- List scripts: [web/list/](mdc:web/list/)
- Edit scripts: [web/edit/](mdc:web/edit/)

## Examples

### Add Script Example
See [web/add/web/index.php](mdc:web/add/web/index.php) for a comprehensive add script implementation.

### List Script Example
See [web/list/web/index.php](mdc:web/list/web/index.php) for a simple list script implementation.

### User Management Example
See [web/add/user/index.php](mdc:web/add/user/index.php) for user creation with email notifications.