---
description: These rules describe how the main bash scripts work
alwaysApply: true
---

# These rules describe how the main bash scripts work

- As already said, the main binary files are in the folder 'bin' in this project, which is the '/usr/local/vesta/bin' folder on the Linux server.
- Includes (additional functions) are in the folder 'func' in this project, which is the '/usr/local/vesta/func' folder on the Linux server.
- Binary files and functions are written in Bash scripting language.
- The '/usr/local/vesta/bin' path is already added to global bash variable $PATH, so, for example, if you type in your bash console 'v-list-sys-services' then '/usr/local/vesta/bin/v-list-sys-services' will be executed, and this script will list all installed services on the Linux server, with state value of each services ('running' or 'off'). As already described, you can find that script in the 'bin\v-list-sys-services' in this project.
- All scripts (we also call them 'commands') return human-readable output. Still, some scripts can return output in JSON format if you pass the 'json' parameter in the appropriate parameter position. JSON output is useful for PHP scripts in the 'web' folder (which serves as a frontend interface for the hosting panel).
- Almost all commands have their definitions at the beginning of their file. For example, the command 'v-list-users' ('bin\v-list-users' from this project) has this definition:
```bash
#!/bin/bash
# info: list users
# options: [FORMAT]
#
# The function to obtain the list of all system users.
```
  From this example, we can see that this command will list all system users from the Linux server. The command has only one parameter, which is the 'FORMAT' parameter, and we know that it's an optional parameter because it's wrapped with [ and ] brackets, which indicates that the parameter is optional.
- Let's take a look at another example. The command 'v-list-web-domains' ('bin\v-list-list-web-domains' from this project) has this definition:
```bash
#!/bin/bash
# info: list web domains
# options: USER [FORMAT]
#
# The function to obtain the list of all user web domains.
```
  From this example, we can see that this command will list all web domains of the user that you specify as the first parameter 'USER'. The command has two parameters: the first is 'USER', which is the username of the user, and the second parameter is 'FORMAT', which is an optional parameter.
- If you don't pass the optional 'FORMAT' parameter, the command will return output in the default human-readable format.
- Now let's see how the most used scripts work.
- If we want to create a new user on the Linux server, we will use the 'v-add-user' command (the '\bin\v-add-user' file from this project, and the '/usr/local/vesta/bin/v-add-user' file on the Linux server).
  If we run 'v-add-user' without any parameters, it will return this:
```
# v-add-user
Usage: v-add-user USER PASSWORD EMAIL [PACKAGE] [FNAME] [LNAME]
```
  Those parameters you can also find in the header of the '\bin\v-add-user' file from this project.
  So, to create a new system user on the Linux server, during the testing phase, we ran the command:
  # v-add-user 'test' 'somePassword' 'admin@deb12.localhost.dev' 'default' 'John' 'Doe'
  You can read the '\bin\v-add-user' file from this project to find out what the script has done. In short: it ran the Linux command 'useradd test', then it created the '/home/test' folder, and it created myVesta config files in the folder '/usr/local/vesta/data/users/test', especially the '/usr/local/vesta/data/users/test/user.conf' file (you can see the file 'example-of-linux-root-folder\usr\local\vesta\data\users\test\user.conf' in this project) where all details about user account were stored (first name and last name of account owner, assigned package, hash of password, etc). That data can be used later to restore/rebuild the user account.
- myVesta config files from the folder '/usr/local/vesta/data/users' are used to store all necessary data about user accounts and their web domains, DNS records, email accounts, cron jobs, etc.
- The myVesta config files are used to build and rebuild config files for all services. For example, command 'bin\v-rebuild-web-domains' (which has one mandatory parameter: USER), if we run 'v-rebuild-web-domains test' then that command will read the '/usr/local/vesta/data/users/test/web.conf' file on the Linux server (the file 'example-of-linux-root-folder\usr\local\vesta\data\users\test\web.conf' in this project) and then it will generate Apache and nginx files in the '/home/test/conf/web' folder (you can see those config files in the 'example-of-linux-root-folder\home\test\conf\web' folder in this project).
- myVesta config files use the simple bash variable format, for example: `variable1='value1' variable2='value2' variable3='value3'`
- That myVesta config format is also used in '/usr/local/vesta/conf/vesta.conf' file on the Linux server (the file 'example-of-linux-root-folder\usr\local\vesta\conf\vesta.conf' in this project), which is myVesta's main config file. As you can see, in that file, each variable is stored in a separate line, which is also fine if one config file represents the properties of one object/entity.
- If one config file contains multiple objects/entities, then multiple variables are stored in one line, and each line represents a separate object/entity. You can see an example in the '/usr/local/vesta/data/users/test/web.conf' file on the Linux server (the file 'example-of-linux-root-folder\usr\local\vesta\data\users\test\web.conf' in this project), where each web domain is stored in a separate line. In the first line, you will find all the needed variables (properties) for the first web domain, and in the second line, you will find variables for another domain, etc.
- Here is another example: to add a web domain to a user account, we will use the command 'v-add-web-domain' (the '\bin\v-add-web-domain' file from this project, and the '/usr/local/vesta/bin/v-add-web-domain' file on the Linux server). This command has the following parameters:
  `Usage: v-add-web-domain USER DOMAIN [IP] [RESTART] [ALIASES] [PROXY_EXTENSIONS]`
  So, during the testing phase, we ran the command:
  `# v-add-web-domain 'test' 'wp.deb12.localhost.dev'`
  The script created the folder '/home/test/web/wp.deb12.localhost.dev' with a few subdolders like '/home/test/web/localhost.dev/public_html' (in this project it is 'example-of-linux-root-folder\home\test\web\wp.deb12.localhost.dev\public_html') which is the web root folder for 'wp.deb12.localhost.dev' domain/subdomains.
  The 'v-add-web-domain' performed the following steps:
    - in '\bin\v-add-web-domain' script, these lines are executed:
      - `add_web_config "$WEB_SYSTEM" "$WEB_TEMPLATE.tpl"`
      - `add_web_config "$PROXY_SYSTEM" "$PROXY_TEMPLATE.tpl"`
    - $WEB_SYSTEM has value 'apache2' (taken from the '/usr/local/vesta/conf/vesta.conf' file) and $WEB_TEMPLATE has value (for example) 'PHP-FPM-82' (taken from the '/usr/local/vesta/data/users/test/user.conf' file).
    - $PROXY_SYSTEM has value 'nginx' (taken from the '/usr/local/vesta/conf/vesta.conf' file) and $PROXY_TEMPLATE has value (for example) 'hosting' (taken from the '/usr/local/vesta/data/users/test/user.conf' file).
    - The function 'add_web_config' is defined in 'func\domain.sh'
    - Because the 'PHP-FPM-82' apache template is chosen, the function reads files 'PHP-FPM-82.tpl', 'PHP-FPM-82.stpl', and 'PHP-FPM-82.sh' files from the '/usr/local/vesta/data/templates/web/apache2' folder (in this project you can find it in 'example-of-linux-root-folder\usr\local\vesta\data\templates\web\apache2' folder).
    - The function 'add_web_config' parsed 'PHP-FPM-82.tpl' and 'PHP-FPM-82.stpl' files, and executed 'PHP-FPM-82.sh' file.
    - Because the 'hosting' nginx template is chosen, the function reads the files 'hosting.tpl' and 'hosting.stpl files from the '/usr/local/vesta/data/templates/web/nginx' folder (in this project you can find it in 'example-of-linux-root-folder\usr\local\vesta\data\templates\web\apache2' folder).
    - The function 'add_web_config' parsed 'hosting.tpl' and 'hosting.stpl' files.
    - 'PHP-FPM-82.sh' execution made a file '/etc/php/8.2/fpm/pool.d/wp.deb12.localhost.dev.conf' (in this project you can find that file in 'example-of-linux-root-folder\etc\php\8.2\fpm\pool.d\wp.deb12.localhost.dev.conf') and restarted the 'php8.2-fpm' service by executing `systemctl restart php8.2-fpm` to load new '/etc/php/8.2/fpm/pool.d/wp.deb12.localhost.dev.conf' file.
    - As a result of function 'add_web_config', in the '/home/test/conf/web' folder (the 'example-of-linux-root-folder\home\test\conf\web' folder in this project), the script created the following files:
      - wp.deb12.localhost.dev.apache2.conf
      - wp.deb12.localhost.dev.apache2.ssl.conf
      - wp.deb12.localhost.dev.nginx.conf
      - wp.deb12.localhost.dev.nginx.ssl.conf
    - These files contain virtualhost config files for Apache2 and nginx.
    - The function 'add_web_config' also executed:
      - `echo "Include $conf" >> /etc/$1/conf.d/vesta.conf`
      - `echo "include $conf;" >> /etc/$1/conf.d/vesta.conf`
    - As a result of these lines, virtualhost config files 'includes' are added to '/etc/apache2/conf.d/vesta.conf' and '/etc/nginx/conf.d/vesta.conf' (in this project you will find those two files in 'example-of-linux-root-folder\etc\apache2\conf.d\vesta.conf' and 'example-of-linux-root-folder\etc\nginx\conf.d\vesta.conf').
    - At the end, the 'v-add-web-domain' script performed:
      - `$BIN/v-restart-web $restart`
      - `$BIN/v-restart-proxy $restart`
    - Those commands literally restarted Apache2 and nginx services, so new VirtualHost files are loaded in Apache2 and nginx.
