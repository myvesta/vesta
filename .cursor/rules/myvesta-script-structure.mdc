---
alwaysApply: true
description: Coding style and structure guidelines for myVesta bash scripts in the bin/ folder
---

# myVesta Script Structure and Coding Style

This rule defines the standard structure and coding patterns for myVesta bash scripts located in the [bin/](mdc:bin/) folder. All scripts follow a consistent four-section structure with specific validation and logging patterns.

## Standard Script Structure

Every myVesta script follows this exact four-section structure:

### 1. Header Section
```bash
#!/bin/bash
# info: [brief description of what the script does]
# options: [PARAM1 PARAM2 [OPTIONAL_PARAM3] [OPTIONAL_PARAM4]]
#
# [Detailed description of the function and its behavior]
```

### 2. Variable&Function Section
```bash
#----------------------------------------------------------#
#                    Variable&Function                     #
#----------------------------------------------------------#

# Argument definition
param1=$1
param2=$2
optional_param=${3-default_value}

# Includes (always include these in order)
source $VESTA/func/main.sh
source $VESTA/func/[domain|db|ip].sh  # as needed
source $VESTA/conf/vesta.conf

# Additional argument formatting (if needed)
format_domain
format_domain_idn
format_aliases

# Custom functions (if needed)
custom_function() {
    # function body
}
```

### 3. Verifications Section
```bash
#----------------------------------------------------------#
#                    Verifications                         #
#----------------------------------------------------------#

# Always start with these core validations:
check_args 'MIN_ARGS' "$#" 'USAGE_STRING'
is_format_valid 'param1' 'param2' 'param3'

# System-specific validations
is_system_enabled "$SYSTEM_VAR" 'SYSTEM_NAME'

# Object validations
is_object_valid 'type' 'TYPE' "$value"
is_object_unsuspended 'type' 'TYPE' "$value"
is_object_new 'type' 'TYPE' "$value"

# Package and limit validations
is_package_full 'LIMIT_TYPE'
is_password_valid  # for password parameters

# Custom validations specific to the script
```

### 4. Action Section
```bash
#----------------------------------------------------------#
#                       Action                             #
#----------------------------------------------------------#

# Main script logic goes here
# This is where the actual work is performed
```

### 5. Vesta Section
```bash
#----------------------------------------------------------#
#                       Vesta                              #
#----------------------------------------------------------#

# Counter updates
increase_user_value "$user" '$COUNTER_VAR'
increase_ip_value "$ip"

# Configuration updates
# Adding entries to .conf files

# Service restarts
$BIN/v-restart-[service] $restart
check_result $? "Service restart failed" >/dev/null

# Logging (always at the end)
log_history "action description"
log_event "$OK" "$ARGUMENTS"

exit
```

## Key Validation Functions

### check_args()
- **Purpose**: Validates minimum number of arguments
- **Usage**: `check_args 'MIN_COUNT' "$#" 'USAGE_STRING'`
- **Example**: `check_args '2' "$#" 'USER DOMAIN [IP] [RESTART]'`

### is_format_valid()
- **Purpose**: Validates format of multiple parameters
- **Usage**: `is_format_valid 'param1' 'param2' 'param3'`
- **Example**: `is_format_valid 'user' 'domain' 'ip'`

### System Validation Functions
- `is_system_enabled "$SYSTEM_VAR" 'SYSTEM_NAME'` - Check if system is enabled
- `is_object_valid 'type' 'TYPE' "$value"` - Validate object exists
- `is_object_unsuspended 'type' 'TYPE' "$value"` - Check object is not suspended
- `is_object_new 'type' 'TYPE' "$value"` - Check object doesn't exist
- `is_package_full 'LIMIT_TYPE'` - Check package limits
- `is_password_valid` - Validate password format

## Logging Patterns

### log_event()
- **Purpose**: Logs system events to system.log or error.log
- **Usage**: `log_event "$OK" "$ARGUMENTS"`
- **Always called at the end of successful operations**

### log_history()
- **Purpose**: Logs user actions to user history
- **Usage**: `log_history "action description"`
- **Optional**: Can include undo flag and user parameter
- **Example**: `log_history "added web domain $domain"`

## Common Patterns

### Argument Handling
- Use `HIDE=N` to hide sensitive parameters (like passwords) from logs
- Use `${N-default}` syntax for optional parameters with defaults
- Always validate all parameters with `is_format_valid`

### Error Handling
- Use `check_result $? "error message"` after critical operations
- Use `check_result $? "error message" $E_ERROR_CODE` for specific error codes
- Always include `>/dev/null` for non-critical check_result calls

### Configuration Management
- `source $USER_DATA/user.conf` is old way to load user configuration, don't use it anymore. Instead of that use `parse_object_kv_list_non_eval $(cat $USER_DATA/user.conf)`
- Use `increase_user_value` and `decrease_user_value` for counters
- Use `update_object_value` for updating specific object properties

### Service Management
- Always restart services after configuration changes
- Use `$BIN/v-restart-[service] $restart` pattern
- Check restart results with `check_result`

## File References

- Main functions: [func/main.sh](mdc:func/main.sh)
- Domain functions: [func/domain.sh](mdc:func/domain.sh)
- Database functions: [func/db.sh](mdc:func/db.sh)
- IP functions: [func/ip.sh](mdc:func/ip.sh)
- Configuration: [example-of-linux-root-folder/usr/local/vesta/conf/vesta.conf](mdc:example-of-linux-root-folder/usr/local/vesta/conf/vesta.conf)

## Examples

See these scripts for reference implementations:
- [bin/v-add-user](mdc:bin/v-add-user) - User creation
- [bin/v-add-web-domain](mdc:bin/v-add-web-domain) - Web domain creation
- [bin/v-add-dns-record](mdc:bin/v-add-dns-record) - DNS record creation
- [bin/v-add-database](mdc:bin/v-add-database) - Database creation
- [bin/v-list-users](mdc:bin/v-list-users) - Listing with multiple output formats